print 'What is Distionery ?'
print '\t Each key is separated from its value by a colon (:), the items are separated by commas, and the whole thing is enclosed in curly braces. An empty dictionary without any items is written with just two curly braces, like this: {}.Keys are unique within a dictionary while values may not be. The values of a dictionary can be of any type, but the keys must be of an immutable data type such as strings, numbers, or tuples.'
dictionary = { 'Name' : 'Joe', 'age' : 24, 'Job': 'Software Engineer' }
print 'Example: %s' % str (dictionary)
print '\t'
print 'Accessing the dictionary :'
print 'We can access the dictionary values by using dictionary name along with key values.'
print 'To get the first element(Name) in the dictionary.'
print  'Use dictionary[\'Name\']. The Output will be ' + dictionary['Name'] + '.'
print '\t'
print 'Updating the Dictionary'
print '\t We can update the dictionary, by adding elements to the dictionary or deleting the elements in the dictionary. To add the elements into the dictionary'
print 'dictionary[\'Address\'] = \'Banglore\''
print '\t'
print 'Now print the dictionary.'
print 'Before :'
print dictionary
dictionary['Address'] = 'Bangalore'
print 'After :'
print dictionary
print '\t'
print 'Properties of Dictionary Keys'
print '\t Dictionary values have no restrictions. They can be any arbitrary Python object, either standard objects or user-defined objects. However, same is not true for the keys.'
print '\t There are two important points to remember about dictionary keys :'
print '\t 1. More than one entry per key not allowed. Which means no duplicate key is allowed. When duplicate keys encountered during assignment, the last assignment wins.'
print '\t 2. Keys must be immutable. Which means you can use strings, numbers or tuples as dictionary keys but something like [\'key\'] is not allowed.'
print '\t'
print 'Built-In Dictionary functions :'
print '1. cmp(dict1, dict2) : Compares elements of both dict.'
print '2. len(dict) : Gives the total length of the dictionary. This would be equal to the number of items in the dictionary.'
print '3. str(dict) : Produces a printable string representation of a dictionary.'
print '4. type(variable) : Returns the type of the passed variable. If passed variable is dictionary, then it would return a dictionary type.'
print '\t'
print 'Built-In Dictionary methods :'
print '1. dict.clear() : Removes all elements of dictionary dict.'
print '2. dict.copy() : Returns a shallow copy of dictionary dict.'
print '3. dict.fromkeys() : Create a new dictionary with keys from seq and values set to value.'
print '4. dict.get(key, default=None) : For key key, returns value or default if key not in dictionary.'
print '5. dict.has_key(key) : Returns true if key in dictionary dict, false otherwise.'
print '6. dict.items() : Returns a list of dict\'s (key, value) tuple pairs.'
print '7. dict.keys() : Returns list of dictionary dict\'s keys.'
print '8. dict.values() : Returns list of dictionary dict\'s values.'
print '9. dict.setdefault(key, default=None) : Similar to get(), but will set dict[key]=default if key is not already in dict.'
print '10. dict.update(dict2) : Adds dictionary dict2\'s key-values pairs to dict.'
print '\t'



